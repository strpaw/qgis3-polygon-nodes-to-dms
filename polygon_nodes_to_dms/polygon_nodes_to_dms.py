# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PolygonNodesToDMS
                                 A QGIS plugin
 Show polygon nodes in DMSH format
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-04-06
        git sha              : $Format:%H$
        copyright            : (C) 2021 by PaweÅ‚ Strzelewicz
        email                : @
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from __future__ import annotations

import os.path

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox, QWidget
from qgis.core import (
    Qgis,
    QgsCoordinateFormatter,
    QgsFeature,
    QgsPointXY,
    QgsVectorLayer,
    QgsWkbTypes
)

# Initialize Qt resources from file resources.py
from .resources import qInitResources
# Import the code for the dialog
from .errors import (
    LayerNotSelectedError,
    LayerNotPolygonMultiPolygonError,
    OneFeatureNotSelectedError
)
from .output_layer import OutputLayer
from .polygon_nodes_to_dms_dialog import PolygonNodesToDMSDialog


class PolygonNodesToDMS:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        self.output_layer = OutputLayer(iface)
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            f'PolygonNodesToDMS_{locale}.qm')

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr('&PolygonNodesToDMS')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('PolygonNodesToDMS', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/polygon_nodes_to_dms/icon.png'
        self.add_action(
            icon_path,
            text=self.tr('PolygonNodesToDMS'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr('&PolygonNodesToDMS'),
                action)
            self.iface.removeToolBarIcon(action)

    def set_initial_plugin_state(self):
        """ Initialize plugin state when opened. """
        self.output_layer = OutputLayer(self.iface)
        self.dlg.radioButtonOrderLonLat.setChecked(True)

    @staticmethod
    def check_input(layer: QgsVectorLayer) -> bool | Exception:
        """Check input for generating nodes with coordinates in DMS formats:
        - selected layer geometry type must be Polygon/MultiPolygon
        - only one feature must be selected

        Raise corresponding exception if requirement is not met (LayerNotPolygonMultiPolygonError etc.).

        :param layer: layer to be checked
        :return: True if all conditions are met
        """
        if not layer:
            raise LayerNotSelectedError
        if layer.wkbType() not in [QgsWkbTypes.Polygon, QgsWkbTypes.MultiPolygon]:
            raise LayerNotPolygonMultiPolygonError

        selected_count = layer.selectedFeatureCount()
        if selected_count != 1:
            raise OneFeatureNotSelectedError

        return True

    def get_coordinate_order(self):
        """Return coordinate order lon/lat or lat/lon

        :return: order XY if lon/lat, order YX if lat/lon Qgis.CoordinateOrder
        """
        if self.dlg.radioButtonOrderLonLat.isChecked():
            return Qgis.CoordinateOrder.XY

        # only radioButtonOrderLatLon can be checked
        return Qgis.CoordinateOrder.YX

    def show_nodes_dms(self) -> None:
        """Generate and display polygon nodes coordinates in DMS format"""
        canvas = self.iface.mapCanvas()
        src_layer = canvas.currentLayer()

        check_result = False
        try:
            check_result = PolygonNodesToDMS.check_input(src_layer)
        except LayerNotSelectedError:
            QMessageBox.critical(QWidget(), "Message", "No active layer.")
        except LayerNotPolygonMultiPolygonError:
            QMessageBox.critical(QWidget(), "Message", "Active layer is not type: Polygon, Multipolygon.")
        except OneFeatureNotSelectedError:
            QMessageBox.critical(QWidget(), "Message", "Select one polygon")

        if not check_result:
            return

        selected_feature = src_layer.selectedFeatures()[0]
        geom = selected_feature.geometry()
        self.output_layer.setup()
        coord_order = self.get_coordinate_order()
        feat = QgsFeature()
        prov = self.output_layer.layer.dataProvider()
        self.output_layer.layer.startEditing()
        # Remove previous node coordinates
        prov.truncate()
        for node_location in geom.vertices():
            dms = QgsCoordinateFormatter.format(
                point=QgsPointXY(node_location),
                format=QgsCoordinateFormatter.FormatDegreesMinutesSeconds,
                precision=3,
                order=coord_order
            )
            feat.setGeometry(node_location)
            feat.setAttributes([dms])
            prov.addFeatures([feat])

        self.output_layer.layer.commitChanges()
        self.output_layer.layer.updateExtents()
        self.iface.mapCanvas().setExtent(self.output_layer.layer.extent())
        self.iface.mapCanvas().refresh()
        self.iface.setActiveLayer(src_layer)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start:
            self.first_start = False
            self.dlg = PolygonNodesToDMSDialog()
            self.dlg.pushButtonShowNodes.clicked.connect(self.show_nodes_dms)
            self.dlg.pushButtonCancel.clicked.connect(self.dlg.close)

        # show the dialog
        self.dlg.show()
        self.set_initial_plugin_state()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
